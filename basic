create database penjualan

create table barang 
(
  kode int,
  nama varchar (100),
  jumlah int,
  harga int 
)

desc barang 

alter table barang 
  add column stok int 
  drop column stok
  add column stok int
  change stok kapasitas varchar (10)
  modify kapasitas int
  modify kapasitas int after nama
  modify kapasitas int not null 
  add primary key (kode)
  drop primary key 
  modify jumlah int not null default 0
  add column tanggal_produksi timestamp not null default current_timestamp

truncate barang = delete from barang 

drop databese, drop table bisa langsung pakai , kalau drop column harus pakai alter table

create table products
(
  id varchar (10),
  name varchar (100),
  description text,
  price int unsigned not null
  quantity int unsigned not null default 0
  created_at timestamp not null default current_timestamp 
)

insert into products(id,name,price,quantity)
values ('P001','mie ayam',10000,100)

update products 
set quantity=10
where id='P001'

insert into products( id,name,description,price,quantity)
values('P002','mie ayam bakso tahu','mie ayam + bakso tahu original',20000,10)

insert into products(id,name,price,quantity)
values ('P003','mie ayam ceker',20000,10),
       ('P004','mie ayam spesial',25000,10),
       ('P005','mie ayam yamin',15000,10) 

create table products
(
  id varchar (10),
  name varchar (100),
  description text,
  price int unsigned not null
  quantity int unsigned not null default 0
  created_at timestamp not null default current_timestamp 
  add primary key (id)
)

alter table products 
add primary key (id)

select * from products 
where quantity=10

select id,name from products 
where quantity=10

update products
set description='original'
where id='P001'

update products 
set category='makanan'
where quantity=10

update products 
set category='lain-lain',
description='bakso tahu'
where id='P002'

update products
set price=price+5000

select id as'kode',
        name as'name',
        category as'kategori',
        price as'harga',
        quantity as 'stok'
from products 

select p.id as'kode',
      p.name as'nama',
      p.category as'kategori',
      p.price as'harga',
      p.quantity as 'stok'
from products as p

select * from products 
where price>20000

select id,name,price from products 
where price>20000

select * from products 
where quantity<=50 and price>=25000

select * from products 
where category='makanan' or price>=25000

select * from products 
where (category='makanan' and price>=2500) or quantity <=50

select * from products 
where name like '%r'

select * from products 
where name like 'e%'

select * from products 
where name like '%es%'

select * from products 
where description is null 

select * from products 
where description is not null

select * from products 
where quantity between 300 and 1000

select * from products 
where category='makanan' or category='minuman'

select * from products 
where category in ('makanan','minuman')

select * from products
order by price asc,quantity desc 

select * from products 
where price>=20000
order by price asc

select * from products 
where price>=20000
order by price
limit 2

select * from products 
where price>=20000
order by price 
limit 5,2

select distinct category from products
select 10*10 as hasil
select round(10+10*5/2,0) as hasil

select id,name,price, price div 1000 as'price in k' from products 
select *, price div 1000 as'price in k' from products 

select pi()
select cos(50),tan(50),sin(50)
select power (8,3)
select price,tan(price),cos(price),sin(price) from products 
select *,tan(price),cos(price),sin(price)
select * from products 
where price div 1000>15

select lower(name),upper(name),length(name) from products 

select *, year(cretaed_at),month(created_at)
from products 

select id,creted_at,year(creted_at),month(created_at) from products 

select *, case category
when 'makanan' then 'enak'
when 'minuman' then 'seger'
else 'apa itu?'
end as'category'
from products 

select id,name,price,
if(price>=15000,'mahal','murah') as'rentang'
from products

select id,name,price,
if(price<=15000,'murah',
if(price<=20000,'mahal','mahal banget')
) as'rentang'
from products 

select *,
ifnull (description,'kosong') as'description'
from products 

select count(id) as'total produk' from products 
select sum(quantity) as'stok' from products
select max(price) as'harga termahal' from products 
select min(price) as'harga termurah' from products
select avg(price) as'harga rata-rata' from products 

select category,
count(id) as'total produk' 
from products
group by category

select category,
sum(quantity) as'stok'
from products
group by category

select category
min(price) as'harga termurah'
from products
group by category

select category,
max(price) as'harga termahal'
from products
group by category

select category,
avg(price) as'harga rata-rata'
from products
group by category

select category,
max(price) as harga_termahal
from products
group by category
having harga_termahal>=20000

select category,
min(price) as harga_termurah
from products
group by category
having harga_termurah>=10000

select category,
count(id) as jumlah_produk
from products
group by category 
having jumlah_produk>4

create table costumers
	(
	Id int not null auto_increment,
	Email varchar(100),
	First_name varchar (100),
	Last_name varchar (100),
	Primary key (id),
	Unique key email_unique (email)
	)

alter table costumers
add constraint email_unique unique(email)

alter table costumers
drop constraint email_unique

Create table sellers
	(
	Id int not null auto_increment,
	Name varchar(100),
	Name2 varchar (100),
	Name3 varchar (100),
	Email varchar (100),
	Primary key (id),
	Unique key email_unique (email),
	Index name_index(name),
	Index name2_index (name2),
	Index name3_index (name3),
	Index name_name2_name3_index (name,name2,name3)
	)

ALTER TABLE sellers
DROP INDEX name_index,
DROP INDEX name2_index;

alter table sellers
add index name_index(name),
add index name2_index (name2)

INSERT INTO sellers (Name, Name2, Name3, Email)
VALUES 
('Alice', 'Bob', 'Carol', 'alice@mail.com'),
('John', 'Smith', 'Doe', 'john@mail.com'),
('Jane', 'Doe', 'Alice', 'jane@mail.com');

SELECT * FROM sellers WHERE name='Alice';
SELECT * FROM sellers WHERE name='Alice' AND name2='Bob';
SELECT * FROM sellers WHERE name='Alice' AND name2='Bob' AND name3='Carol';


SELECT * FROM products
WHERE name LIKE '%es%' OR description LIKE '%bakso%'

fulltext -> natural,boolean,query expansion
Alter table products
	Add fulltext produk_search (name,description)

Alter table products
	Drop index produk_search

select*from products 
where match (name,description)
against (‘bakso’ in natural language mode)

select * from products 
where match (name,description)
against (‘+ayam -bakso’ in boolean mode) 

select * from products 
where match (name,description)
against (‘ayam’ with query expansion) 

membuat foreign key 
create table wishlist 
(
id int not null auto_increment,
id_produk int not null, -> tipe data harus sama dengan id products
description text,
primary key(id),
constraint fk_wishlist_produk
foreign key(id_produk) references products(id)
)

alter table wishlist 
add constraint fk_wishlist_produk
foreign key(id_produk) references products(id)

alter table wishlist 
drop constraint fk_wishlist_produk

insert into wishlist (id_produk,description)
values(1,'enak bgt') berhasil karena ada di tabel products 

insert into wishlist (id_produk,description)
values(16,'enak bgt') tidak berhasil karena tidak ada di tabel products 

kerena dia berelasi maka ketika data di tabel products dihapus maka akan ditolak 
delete from products 
where id=1 -> tidak kehapus karena dia berelasi di tabel wishlist 
delete from products 
where id=2  -> berhasil dihapus 

mengubah biar bisa dihapus 
alter table wishlist 
add constraint fk_wishlist_produk
foreign key(id_produk) references products(id)
on delete cascade on update cascade

jika sudah ditambah cascasde 
delete from products 
where id=1 -> bakal kehapus di tabel products dan wishlist 

membuat relasi ketabel products dengan join
select * from wishlist join products on (wishlist.id_produk=products.id)

select wishlist.id, products.id, products.name, wishlist.description
from products join wishlist on ( wishlist.id_produk=products.id)
select w.id, p.id, p.name, w.description
from products as p join wishlist as w on ( wishlist.id_produk=products.id)

membuat relasi ketabel customers 
pertama tambahkan kolom dulu 
alter table wishlist
add column id_customers int

kedua membuat foreign key ke tabel wishlist 
alter table wishlist 
add constraint fk_customers_produk
foreign key (id_customers) references customers (id)

update wishlist 
set id_customers=1
where id=1

multiple join -> di wishlist ada 2 foreign key id_produk dan id_customers ini yang buat berelasi 
select * from wishlist join products on (wihslist.id_produk=products.id)
join customers on (wishlist.id_customers=customers.id)

select customers.email,products.id, products.name,wishlist.description 
from wishlist join products on (wishlist.id_produk=products.id)
join customers on (wishlist.id_customers=customers.id)

one to one relationship -> contohnya 1 costumers hanya punya 1 e-wallet dan 1 wallet hanya boleh dimiliki oleh 1 customers
membuat table wallet karena tabel customers sudah ada
create table wallet 
(
id int  not null auto_increment,
id_customers int not null, -> foreign key di wallet, primary key di customers 
balance int not null default 0,
primary key (id),
unique key id_customers_unique (id_customers)
constraint fk_wallet_customers
foreign key (id_customers) references customers(id)
)

memasukkan nilai ke tabel wallet dengan memastikan bahwa data sudah ada di table customers
insert into wallet(id_customers,balance)
values(1,' ') -> berhasil karena ada data di bale customers 
insert into wallet(id_customers,balance)
values(2,' ')  -> tidak berhasil karena data tidak ada di table customers 

select *from wallet -> menampilakan semua kolom dari kedua tabel
join customers on (wallet.id_customers=customers.id)

select customers.email ,wallet.balance -> hanya menampilkan email dan balance
from wallet 
join customers on (wallet.id_customers=customers.id)

one to many relationship -> 1 category bisa berlasi ke banyak products. bedanya dengan one to many tidak pakai unique key
membuat tabel category karena table products sudah ada 
create table category
(
id varchar(10) ,
name varchar (100),
primary key(id)
)

karena table  product sudah ada tinggal tambahkan foreign key nya,namun sebelumnya di table products ada kolom category agar tidak bingung hapus dahulu
alter table products 
drop column category

setelah itu tambahkan kolom id_category pada tabel products untuk relasinya 
alter table products 
add column id_category varchar (10) 

selanjutnya mengubah kolom id_category jadi foreign key 
alter table products 
add constraint fk_category_products
foreign key (id_category) references category(id)

karena tabel category belum ada datanya masukkan dulu datanya 
insert into category(id,name)
values 	('a','makanan'),
	('b','minuman'),
	('c','lain-lain')

memasukkan nilai ke tabel products dengan memastikan bahwa data sudah ada di table category hanya untuk mengecek 
update products 
set id_category='a'
where id in (1,5,6,7,9,10,11,12,13,14,15);

update products 
set id_category='b'
where id in (2,4,8)

melakukan join
select products.id, products.name,category.name
from products
join category on (category.id=products.id_category);

relasi many to many -> products dan order 
solusi : menambhakan table baru ditengahnya yang berisi id dari tabel pertama dan tabel kedua 
dalam hal ini id_products dan id_order

membuat table orders 
create table orders
(
id int not null auto_increment,
total int not null,
order_date timestamp default current_timestamp,
primary key (id)
)

membuat table orders_detail
create table orders_detail
(
id_products int not null,
id_orders int not null,
price int not null,
quantity int not null,
primary key(id_products,id_orders)
)

membuat foreign key untuk table relasi(tengah-tengah)
alter table orders_detail
add constraint fk_orders_detail_products
foreign key(id_products) references products(id)  -> tipe data id di table products harusa sama dgn kolom id_products di tabel orders_detail

alter table orders_detail
add constraint fk_orders_detail_orders
foreign key(id_orders) references orders(id) -> tipe data id di tabel orders harus sama dengan kolom id_orders di table orders_detail\

masukkan data ke tabel orders 
insert into orders (total)
values (50000),(50000),(50000)

masukkan data ke tabel orders_detail
insert into orders_detail (id_products,id_orders,price,quantity)
values  (1,1,25000,1),
	(2,1,25000,1)
insert into orders_detail (id_products,id_orders,price,quantity)
values  (4,2,25000,1),
	(5,2,25000,1)
insert into orders_detail (id_products,id_orders,price,quantity)
values  (1,3,25000,1),
	(4,3,25000,1)

melakukan join 
select * from orders join orders_detail on (orders_detail.id_order=orders.id)
		     join products on (products.id=orders_detail.id_products)

select orders.id, products.id, products.name,orders_detail.quantity,orders_detail.price from orders
join orders_detail on (orders_detail.id_order=orders.id)
		     join products on (products.id=orders_detail.id_products)

macam-macam join
inner join
select * from category
inner join products on (products.id_category=category.id)

menambhakan data ke table category 
insert into category (id,name)
values (4, 'oleh-oleh'),
	(5,'gadget')

menambahkan data ke table products
insert into products (id,name,price,quantity)
values(23,'x satu',25000,200),
	(24,'x dua',10000,300),
	(25,'x tiga',15000,500)

left join 
select * from category
left join products on (products.id_category=category.id)

right join
select * from category
right join products on (products.id_category=category.id)

cross join (mengalikan dua kali)
select * from category 
cross join products

melakukan subquery di where clause
select * from products 
where price>(select avg(price) from products)

melakukan subquery di from clause 
select max(price)
from (select price
	from category
		inner join products
			on(products.id_category=category.id)) as cp
	

    
    























